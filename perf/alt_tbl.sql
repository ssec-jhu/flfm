"[('table', 'StringIds', 'StringIds', 2, 'CREATE TABLE StringIds (\\n -- Consolidation of repetitive string values.\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- ID reference value.\\n value TEXT NOT NULL -- String value.\\n)'), ('table', 'ANALYSIS_FILE', 'ANALYSIS_FILE', 95, 'CREATE TABLE ANALYSIS_FILE (\\n -- Analysis file content\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- ID reference value.\\n filename TEXT, -- File path\\n contentId INTEGER, -- REFERENCES StringIds(id) -- File content\\n globalPid INTEGER NOT NULL -- Serialized GlobalId.\\n)'), ('table', 'ProcessStreams', 'ProcessStreams', 96, 'CREATE TABLE ProcessStreams (\\n globalPid INTEGER NOT NULL, -- Serialized GlobalId.\\n filenameId INTEGER NOT NULL, -- REFERENCES StringIds(id) -- File name\\n contentId INTEGER NOT NULL -- REFERENCES StringIds(id) -- Stream content\\n)'), ('table', 'NVTX_PAYLOAD_SCHEMAS', 'NVTX_PAYLOAD_SCHEMAS', 97, 'CREATE TABLE NVTX_PAYLOAD_SCHEMAS (\\n -- NVTX payload schema attributes.\\n\\n domainId INTEGER, -- User-controlled ID that can be used to group events.\\n schemaId INTEGER, -- Identifier of the payload schema.\\n name TEXT, -- Schema name.\\n type INTEGER, -- Schema type.\\n flags INTEGER, -- Schema flags.\\n numEntries INTEGER, -- Number of payload schema entries.\\n payloadSize INTEGER, -- Size of the static payload.\\n alignTo INTEGER -- Field alignment in bytes.\\n)'), ('table', 'NVTX_PAYLOAD_SCHEMA_ENTRIES', 'NVTX_PAYLOAD_SCHEMA_ENTRIES', 98, 'CREATE TABLE NVTX_PAYLOAD_SCHEMA_ENTRIES (\\n -- NVTX payload schema entries.\\n\\n domainId INTEGER NOT NULL, -- User-controlled ID that can be used to group events.\\n schemaId INTEGER NOT NULL, -- Identifier of the payload schema.\\n idx INTEGER NOT NULL, -- Index of the entry in the payload schema.\\n flags INTEGER, -- Payload entry flags.\\n type INTEGER, -- Payload entry type.\\n name TEXT, -- Label of the payload entry.\\n description TEXT, -- Description of the payload entry.\\n arrayOrUnionDetail INTEGER, -- Array length (index) or selected union member.\\n offset INTEGER -- Entry offset in the binary data in bytes.\\n)'), ('table', 'TARGET_INFO_SYSTEM_ENV', 'TARGET_INFO_SYSTEM_ENV', 99, 'CREATE TABLE TARGET_INFO_SYSTEM_ENV (\\n globalVid INTEGER, -- Serialized GlobalId.\\n devStateName TEXT NOT NULL, -- Device state name.\\n name TEXT NOT NULL, -- Property name.\\n nameEnum INTEGER NOT NULL, -- Property enum value.\\n value TEXT NOT NULL -- Property value.\\n)'), ('table', 'TARGET_INFO_SESSION_START_TIME', 'TARGET_INFO_SESSION_START_TIME', 106, 'CREATE TABLE TARGET_INFO_SESSION_START_TIME (\\n utcEpochNs INTEGER, -- UTC Epoch timestamp at start of the capture (ns).\\n utcTime TEXT, -- Start of the capture in UTC.\\n localTime TEXT -- Start of the capture in local time of target.\\n)'), ('table', 'ANALYSIS_DETAILS', 'ANALYSIS_DETAILS', 109, 'CREATE TABLE ANALYSIS_DETAILS (\\n -- Details about the analysis session.\\n\\n globalVid INTEGER NOT NULL, -- Serialized GlobalId.\\n duration INTEGER NOT NULL, -- The total time span of the entire trace (ns).\\n startTime INTEGER NOT NULL, -- Trace start timestamp in nanoseconds.\\n stopTime INTEGER NOT NULL -- Trace stop timestamp in nanoseconds.\\n)'), ('table', 'DIAGNOSTIC_EVENT', 'DIAGNOSTIC_EVENT', 110, 'CREATE TABLE DIAGNOSTIC_EVENT (\\n timestamp INTEGER NOT NULL, -- Event timestamp (ns).\\n timestampType INTEGER NOT NULL, -- REFERENCES ENUM_DIAGNOSTIC_TIMESTAMP_SOURCE(id)\\n source INTEGER NOT NULL, -- REFERENCES ENUM_DIAGNOSTIC_SOURCE_TYPE(id)\\n severity INTEGER NOT NULL, -- REFERENCES ENUM_DIAGNOSTIC_SEVERITY_LEVEL(id)\\n text TEXT NOT NULL, -- Diagnostic message text\\n globalPid INTEGER -- Serialized GlobalId.\\n)'), ('table', 'NVTX_EVENTS', 'NVTX_EVENTS', 111, 'CREATE TABLE NVTX_EVENTS (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER, -- Event end timestamp (ns).\\n eventType INTEGER NOT NULL, -- REFERENCES ENUM_NSYS_EVENT_TYPE(id)\\n rangeId INTEGER, -- Correlation ID returned from a nvtxRangeStart call.\\n category INTEGER, -- User-controlled ID that can be used to group events.\\n color INTEGER, -- Encoded ARGB color value.\\n text TEXT, -- Explicit name/text (non-registered string)\\n globalTid INTEGER, -- Serialized GlobalId.\\n endGlobalTid INTEGER, -- Serialized GlobalId.\\n textId INTEGER, -- REFERENCES StringIds(id) -- Registered NVTX domain/string\\n domainId INTEGER, -- User-controlled ID that can be used to group events.\\n uint64Value INTEGER, -- One of possible payload value union members.\\n int64Value INTEGER, -- One of possible payload value union members.\\n doubleValue REAL, -- One of possible payload value union members.\\n uint32Value INTEGER, -- One of possible payload value union members.\\n int32Value INTEGER, -- One of possible payload value union members.\\n floatValue REAL, -- One of possible payload value union members.\\n jsonTextId INTEGER, -- One of possible payload value union members.\\n jsonText TEXT, -- One of possible payload value union members.\\n binaryData TEXT -- Binary payload. See docs for format.\\n)'), ('table', 'CUPTI_ACTIVITY_KIND_CUDA_EVENT', 'CUPTI_ACTIVITY_KIND_CUDA_EVENT', 113, 'CREATE TABLE CUPTI_ACTIVITY_KIND_CUDA_EVENT (\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n greenContextId INTEGER, -- Green context ID.\\n streamId INTEGER NOT NULL, -- Stream ID.\\n correlationId INTEGER, -- Correlation ID of the event record API to which this result is associated.\\n globalPid INTEGER, -- Serialized GlobalId.\\n eventId INTEGER NOT NULL -- Event ID for which the event record API is called.\\n)'), ('table', 'PROFILER_OVERHEAD', 'PROFILER_OVERHEAD', 114, 'CREATE TABLE PROFILER_OVERHEAD (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n globalTid INTEGER, -- Serialized GlobalId.\\n nameId INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Function name\\n returnValue INTEGER NOT NULL -- Return value of the function call.\\n)'), ('table', 'CUPTI_ACTIVITY_KIND_RUNTIME', 'CUPTI_ACTIVITY_KIND_RUNTIME', 124, 'CREATE TABLE CUPTI_ACTIVITY_KIND_RUNTIME (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n eventClass INTEGER NOT NULL, -- REFERENCES ENUM_NSYS_EVENT_CLASS(id)\\n globalTid INTEGER, -- Serialized GlobalId.\\n correlationId INTEGER, -- ID used to identify events that this function call has triggered.\\n nameId INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Function name\\n returnValue INTEGER NOT NULL, -- Return value of the function call.\\n callchainId INTEGER -- REFERENCES CUDA_CALLCHAINS(id)\\n)'), ('table', 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION', 'CUPTI_ACTIVITY_KIND_SYNCHRONIZATION', 126, 'CREATE TABLE CUPTI_ACTIVITY_KIND_SYNCHRONIZATION (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n greenContextId INTEGER, -- Green context ID.\\n streamId INTEGER NOT NULL, -- Stream ID.\\n correlationId INTEGER, -- Correlation ID of the synchronization API to which this result is associated.\\n globalPid INTEGER, -- Serialized GlobalId.\\n syncType INTEGER NOT NULL, -- REFERENCES ENUM_CUPTI_SYNC_TYPE(id)\\n eventId INTEGER NOT NULL -- Event ID for which the synchronization API is called.\\n)'), ('table', 'CUPTI_ACTIVITY_KIND_MEMCPY', 'CUPTI_ACTIVITY_KIND_MEMCPY', 127, 'CREATE TABLE CUPTI_ACTIVITY_KIND_MEMCPY (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n greenContextId INTEGER, -- Green context ID.\\n streamId INTEGER NOT NULL, -- Stream ID.\\n correlationId INTEGER, -- REFERENCES CUPTI_ACTIVITY_KIND_RUNTIME(correlationId)\\n globalPid INTEGER, -- Serialized GlobalId.\\n bytes INTEGER NOT NULL, -- Number of bytes transferred (B).\\n copyKind INTEGER NOT NULL, -- REFERENCES ENUM_CUDA_MEMCPY_OPER(id)\\n deprecatedSrcId INTEGER, -- Deprecated, use srcDeviceId instead.\\n srcKind INTEGER, -- REFERENCES ENUM_CUDA_MEM_KIND(id)\\n dstKind INTEGER, -- REFERENCES ENUM_CUDA_MEM_KIND(id)\\n srcDeviceId INTEGER, -- Source device ID.\\n srcContextId INTEGER, -- Source context ID.\\n dstDeviceId INTEGER, -- Destination device ID.\\n dstContextId INTEGER, -- Destination context ID.\\n migrationCause INTEGER, -- REFERENCES ENUM_CUDA_UNIF_MEM_MIGRATION(id)\\n graphNodeId INTEGER, -- REFERENCES CUDA_GRAPH_NODE_EVENTS(graphNodeId)\\n virtualAddress INTEGER -- Virtual base address of the page/s being transferred.\\n)'), ('table', 'CUPTI_ACTIVITY_KIND_KERNEL', 'CUPTI_ACTIVITY_KIND_KERNEL', 138, 'CREATE TABLE CUPTI_ACTIVITY_KIND_KERNEL (\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n greenContextId INTEGER, -- Green context ID.\\n streamId INTEGER NOT NULL, -- Stream ID.\\n correlationId INTEGER, -- REFERENCES CUPTI_ACTIVITY_KIND_RUNTIME(correlationId)\\n globalPid INTEGER, -- Serialized GlobalId.\\n demangledName INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Kernel function name w/ templates\\n shortName INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Base kernel function name\\n mangledName INTEGER, -- REFERENCES StringIds(id) -- Raw C++ mangled kernel function name\\n launchType INTEGER, -- REFERENCES ENUM_CUDA_KERNEL_LAUNCH_TYPE(id)\\n cacheConfig INTEGER, -- REFERENCES ENUM_CUDA_FUNC_CACHE_CONFIG(id)\\n registersPerThread INTEGER NOT NULL, -- Number of registers required for each thread executing the kernel.\\n gridX INTEGER NOT NULL, -- X-dimension grid size.\\n gridY INTEGER NOT NULL, -- Y-dimension grid size.\\n gridZ INTEGER NOT NULL, -- Z-dimension grid size.\\n blockX INTEGER NOT NULL, -- X-dimension block size.\\n blockY INTEGER NOT NULL, -- Y-dimension block size.\\n blockZ INTEGER NOT NULL, -- Z-dimension block size.\\n staticSharedMemory INTEGER NOT NULL, -- Static shared memory allocated for the kernel (B).\\n dynamicSharedMemory INTEGER NOT NULL, -- Dynamic shared memory reserved for the kernel (B).\\n localMemoryPerThread INTEGER NOT NULL, -- Amount of local memory reserved for each thread (B).\\n localMemoryTotal INTEGER NOT NULL, -- Total amount of local memory reserved for the kernel (B).\\n gridId INTEGER NOT NULL, -- Unique grid ID of the kernel assigned at runtime.\\n sharedMemoryExecuted INTEGER, -- Shared memory size set by the driver.\\n graphNodeId INTEGER, -- REFERENCES CUDA_GRAPH_NODE_EVENTS(graphNodeId)\\n sharedMemoryLimitConfig INTEGER -- REFERENCES ENUM_CUDA_SHARED_MEM_LIMIT_CONFIG(id)\\n)'), ('table', 'PROCESSES', 'PROCESSES', 218, 'CREATE TABLE PROCESSES (\\n -- Names and identifiers of processes captured in the report.\\n\\n globalPid INTEGER, -- Serialized GlobalId.\\n pid INTEGER, -- The process ID.\\n name TEXT -- The process name.\\n)'), ('table', 'OSRT_CALLCHAINS', 'OSRT_CALLCHAINS', 223, 'CREATE TABLE OSRT_CALLCHAINS (\\n -- Callchains attached to OSRT events, depending on selected profiling settings.\\n\\n id INTEGER NOT NULL, -- Part of PRIMARY KEY (id, stackDepth).\\n symbol INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Function name\\n module INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Module name\\n kernelMode INTEGER, -- True if kernel mode.\\n thumbCode INTEGER, -- True if thumb code.\\n unresolved INTEGER, -- True if the symbol was not resolved.\\n specialEntry INTEGER, -- True if artifical entry added during processing callchain.\\n originalIP INTEGER, -- Instruction pointer value.\\n unwindMethod INTEGER, -- REFERENCES ENUM_STACK_UNWIND_METHOD(id)\\n stackDepth INTEGER NOT NULL, -- Zero-base index of the given function in call stack.\\n\\n PRIMARY KEY (id, stackDepth)\\n)'), ('table', 'OSRT_API', 'OSRT_API', 226, 'CREATE TABLE OSRT_API (\\n -- OS runtime libraries traced to gather information about low-level userspace APIs.\\n\\n start INTEGER NOT NULL, -- Event start timestamp (ns).\\n end INTEGER NOT NULL, -- Event end timestamp (ns).\\n eventClass INTEGER NOT NULL, -- REFERENCES ENUM_NSYS_EVENT_CLASS(id)\\n globalTid INTEGER, -- Serialized GlobalId.\\n nameId INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Function name\\n returnValue INTEGER NOT NULL, -- Return value of the function call.\\n nestingLevel INTEGER, -- Zero-base index of the nesting level.\\n callchainId INTEGER NOT NULL -- REFERENCES OSRT_CALLCHAINS(id)\\n)'), ('table', 'ThreadNames', 'ThreadNames', 291, 'CREATE TABLE ThreadNames (\\n nameId INTEGER NOT NULL, -- REFERENCES StringIds(id) -- Thread name\\n priority INTEGER, -- Priority of the thread.\\n globalTid INTEGER -- Serialized GlobalId.\\n)'), ('table', 'TARGET_INFO_GPU', 'TARGET_INFO_GPU', 301, 'CREATE TABLE TARGET_INFO_GPU (\\n vmId INTEGER NOT NULL, -- Serialized GlobalId.\\n id INTEGER NOT NULL, -- Device ID.\\n name TEXT, -- Device name.\\n busLocation TEXT, -- PCI bus location.\\n isDiscrete INTEGER, -- True if discrete, false if integrated.\\n l2CacheSize INTEGER, -- Size of L2 cache (B).\\n totalMemory INTEGER, -- Total amount of memory on the device (B).\\n memoryBandwidth INTEGER, -- Amount of memory transferred (B).\\n clockRate INTEGER, -- Clock frequency (Hz).\\n smCount INTEGER, -- Number of multiprocessors on the device.\\n pwGpuId INTEGER, -- PerfWorks GPU ID.\\n uuid TEXT, -- Device UUID.\\n luid INTEGER, -- Device LUID.\\n chipName TEXT, -- Chip name.\\n cuDevice INTEGER, -- CUDA device ID.\\n ctxswDevPath TEXT, -- GPU context switch device node path.\\n ctrlDevPath TEXT, -- GPU control device node path.\\n revision INTEGER, -- Revision number.\\n nodeMask INTEGER, -- Device node mask.\\n constantMemory INTEGER, -- Memory available on device for __constant__ variables (B).\\n maxIPC INTEGER, -- Maximum instructions per count.\\n maxRegistersPerBlock INTEGER, -- Maximum number of 32-bit registers available per block.\\n maxShmemPerBlock INTEGER, -- Maximum optin shared memory per block.\\n maxShmemPerBlockOptin INTEGER, -- Maximum optin shared memory per block.\\n maxShmemPerSm INTEGER, -- Maximum shared memory available per multiprocessor (B).\\n maxRegistersPerSm INTEGER, -- Maximum number of 32-bit registers available per multiprocessor.\\n threadsPerWarp INTEGER, -- Warp size in threads.\\n asyncEngines INTEGER, -- Number of asynchronous engines.\\n maxWarpsPerSm INTEGER, -- Maximum number of warps per multiprocessor.\\n maxBlocksPerSm INTEGER, -- Maximum number of blocks per multiprocessor.\\n maxThreadsPerBlock INTEGER, -- Maximum number of threads per block.\\n maxBlockDimX INTEGER, -- Maximum X-dimension of a block.\\n maxBlockDimY INTEGER, -- Maximum Y-dimension of a block.\\n maxBlockDimZ INTEGER, -- Maximum Z-dimension of a block.\\n maxGridDimX INTEGER, -- Maximum X-dimension of a grid.\\n maxGridDimY INTEGER, -- Maximum Y-dimension of a grid.\\n maxGridDimZ INTEGER, -- Maximum Z-dimension of a grid.\\n computeMajor INTEGER, -- Major compute capability version number.\\n computeMinor INTEGER, -- Minor compute capability version number.\\n smMajor INTEGER, -- Major multiprocessor version number.\\n smMinor INTEGER -- Minor multiprocessor version number.\\n)'), ('table', 'TARGET_INFO_NVTX_CUDA_DEVICE', 'TARGET_INFO_NVTX_CUDA_DEVICE', 303, 'CREATE TABLE TARGET_INFO_NVTX_CUDA_DEVICE (\\n name TEXT NOT NULL, -- CUDA device name assigned using NVTX.\\n hwId INTEGER NOT NULL, -- Hardware ID.\\n vmId INTEGER NOT NULL, -- VM ID.\\n deviceId INTEGER NOT NULL -- Device ID.\\n)'), ('table', 'TARGET_INFO_NVTX_CUDA_STREAM', 'TARGET_INFO_NVTX_CUDA_STREAM', 304, 'CREATE TABLE TARGET_INFO_NVTX_CUDA_STREAM (\\n name TEXT NOT NULL, -- CUDA stream name assigned using NVTX.\\n hwId INTEGER NOT NULL, -- Hardware ID.\\n vmId INTEGER NOT NULL, -- VM ID.\\n processId INTEGER NOT NULL, -- Process ID.\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n streamId INTEGER NOT NULL -- Stream ID.\\n)'), ('table', 'TARGET_INFO_CUDA_CONTEXT_INFO', 'TARGET_INFO_CUDA_CONTEXT_INFO', 306, 'CREATE TABLE TARGET_INFO_CUDA_CONTEXT_INFO (\\n nullStreamId INTEGER NOT NULL, -- Stream ID.\\n hwId INTEGER NOT NULL, -- Hardware ID.\\n vmId INTEGER NOT NULL, -- VM ID.\\n processId INTEGER NOT NULL, -- Process ID.\\n deviceId INTEGER NOT NULL, -- Device ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n parentContextId INTEGER, -- For green context, this is the parent context id.\\n isGreenContext INTEGER -- Is this a Green Context?\\n)'), ('table', 'TARGET_INFO_CUDA_STREAM', 'TARGET_INFO_CUDA_STREAM', 307, 'CREATE TABLE TARGET_INFO_CUDA_STREAM (\\n streamId INTEGER NOT NULL, -- Stream ID.\\n hwId INTEGER NOT NULL, -- Hardware ID.\\n vmId INTEGER NOT NULL, -- VM ID.\\n processId INTEGER NOT NULL, -- Process ID.\\n contextId INTEGER NOT NULL, -- Context ID.\\n priority INTEGER NOT NULL, -- Priority of the stream.\\n flag INTEGER NOT NULL -- REFERENCES ENUM_CUPTI_STREAM_TYPE(id)\\n)'), ('table', 'ENUM_NSYS_EVENT_TYPE', 'ENUM_NSYS_EVENT_TYPE', 308, 'CREATE TABLE ENUM_NSYS_EVENT_TYPE (\\n -- Nsys event type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_EVENT_CLASS', 'ENUM_NSYS_EVENT_CLASS', 311, 'CREATE TABLE ENUM_NSYS_EVENT_CLASS (\\n -- Nsys event class labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_SOURCE', 'ENUM_NSYS_GENERIC_EVENT_SOURCE', 314, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_SOURCE (\\n -- Nsys generic event source labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_GROUP', 'ENUM_NSYS_GENERIC_EVENT_GROUP', 315, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_GROUP (\\n -- Nsys generic event group labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_FIELD_TYPE', 'ENUM_NSYS_GENERIC_EVENT_FIELD_TYPE', 316, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_FIELD_TYPE (\\n -- Nsys generic event field type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_PROPERTY', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_PROPERTY', 318, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_PROPERTY (\\n -- Nsys generic event field ETW property flag labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_TYPE', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_TYPE', 319, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_TYPE (\\n -- Nsys generic event field ETW type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_FLAGS', 'ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_FLAGS', 320, 'CREATE TABLE ENUM_NSYS_GENERIC_EVENT_FIELD_ETW_FLAGS (\\n -- Nsys generic event field ETW map info flag labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_GPU_CTX_SWITCH', 'ENUM_GPU_CTX_SWITCH', 321, 'CREATE TABLE ENUM_GPU_CTX_SWITCH (\\n -- GPU context switch labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_MEMCPY_OPER', 'ENUM_CUDA_MEMCPY_OPER', 322, 'CREATE TABLE ENUM_CUDA_MEMCPY_OPER (\\n -- CUDA memcpy operation labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_MEM_KIND', 'ENUM_CUDA_MEM_KIND', 323, 'CREATE TABLE ENUM_CUDA_MEM_KIND (\\n -- CUDA memory kind labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_MEMPOOL_TYPE', 'ENUM_CUDA_MEMPOOL_TYPE', 324, 'CREATE TABLE ENUM_CUDA_MEMPOOL_TYPE (\\n -- CUDA mempool type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_MEMPOOL_OPER', 'ENUM_CUDA_MEMPOOL_OPER', 325, 'CREATE TABLE ENUM_CUDA_MEMPOOL_OPER (\\n -- CUDA mempool operation labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_DEV_MEM_EVENT_OPER', 'ENUM_CUDA_DEV_MEM_EVENT_OPER', 326, 'CREATE TABLE ENUM_CUDA_DEV_MEM_EVENT_OPER (\\n -- CUDA device mem event operation labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_KERNEL_LAUNCH_TYPE', 'ENUM_CUDA_KERNEL_LAUNCH_TYPE', 328, 'CREATE TABLE ENUM_CUDA_KERNEL_LAUNCH_TYPE (\\n -- CUDA kernel launch type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_SHARED_MEM_LIMIT_CONFIG', 'ENUM_CUDA_SHARED_MEM_LIMIT_CONFIG', 329, 'CREATE TABLE ENUM_CUDA_SHARED_MEM_LIMIT_CONFIG (\\n -- CUDA shared memory limit config labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_UNIF_MEM_MIGRATION', 'ENUM_CUDA_UNIF_MEM_MIGRATION', 330, 'CREATE TABLE ENUM_CUDA_UNIF_MEM_MIGRATION (\\n -- CUDA unified memory migration cause labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_UNIF_MEM_ACCESS_TYPE', 'ENUM_CUDA_UNIF_MEM_ACCESS_TYPE', 331, 'CREATE TABLE ENUM_CUDA_UNIF_MEM_ACCESS_TYPE (\\n -- CUDA unified memory access type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUDA_FUNC_CACHE_CONFIG', 'ENUM_CUDA_FUNC_CACHE_CONFIG', 332, 'CREATE TABLE ENUM_CUDA_FUNC_CACHE_CONFIG (\\n -- CUDA function cache config labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUPTI_STREAM_TYPE', 'ENUM_CUPTI_STREAM_TYPE', 333, 'CREATE TABLE ENUM_CUPTI_STREAM_TYPE (\\n -- CUPTI stream type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_CUPTI_SYNC_TYPE', 'ENUM_CUPTI_SYNC_TYPE', 334, 'CREATE TABLE ENUM_CUPTI_SYNC_TYPE (\\n -- CUPTI synchronization type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_STACK_UNWIND_METHOD', 'ENUM_STACK_UNWIND_METHOD', 335, 'CREATE TABLE ENUM_STACK_UNWIND_METHOD (\\n -- Stack unwind method labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_SAMPLING_THREAD_STATE', 'ENUM_SAMPLING_THREAD_STATE', 336, 'CREATE TABLE ENUM_SAMPLING_THREAD_STATE (\\n -- Sampling thread state labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_SCHEDULING_THREAD_BLOCK', 'ENUM_SCHEDULING_THREAD_BLOCK', 338, 'CREATE TABLE ENUM_SCHEDULING_THREAD_BLOCK (\\n -- Scheduling thread block labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENGL_DEBUG_SOURCE', 'ENUM_OPENGL_DEBUG_SOURCE', 339, 'CREATE TABLE ENUM_OPENGL_DEBUG_SOURCE (\\n -- OpenGL debug source labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENGL_DEBUG_TYPE', 'ENUM_OPENGL_DEBUG_TYPE', 340, 'CREATE TABLE ENUM_OPENGL_DEBUG_TYPE (\\n -- OpenGL debug type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENGL_DEBUG_SEVERITY', 'ENUM_OPENGL_DEBUG_SEVERITY', 341, 'CREATE TABLE ENUM_OPENGL_DEBUG_SEVERITY (\\n -- OpenGL debug severity labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_VULKAN_PIPELINE_CREATION_FLAGS', 'ENUM_VULKAN_PIPELINE_CREATION_FLAGS', 342, 'CREATE TABLE ENUM_VULKAN_PIPELINE_CREATION_FLAGS (\\n -- Vulkan pipeline creation feedback flag labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_D3D12_HEAP_TYPE', 'ENUM_D3D12_HEAP_TYPE', 343, 'CREATE TABLE ENUM_D3D12_HEAP_TYPE (\\n -- D3D12 heap type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_D3D12_PAGE_PROPERTY', 'ENUM_D3D12_PAGE_PROPERTY', 344, 'CREATE TABLE ENUM_D3D12_PAGE_PROPERTY (\\n -- D3D12 CPU page property labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_D3D12_HEAP_FLAGS', 'ENUM_D3D12_HEAP_FLAGS', 345, 'CREATE TABLE ENUM_D3D12_HEAP_FLAGS (\\n -- D3D12 heap flag labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_D3D12_CMD_LIST_TYPE', 'ENUM_D3D12_CMD_LIST_TYPE', 347, 'CREATE TABLE ENUM_D3D12_CMD_LIST_TYPE (\\n -- D3D12 command list type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENACC_DEVICE', 'ENUM_OPENACC_DEVICE', 348, 'CREATE TABLE ENUM_OPENACC_DEVICE (\\n -- OpenACC device type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENACC_EVENT_KIND', 'ENUM_OPENACC_EVENT_KIND', 349, 'CREATE TABLE ENUM_OPENACC_EVENT_KIND (\\n -- OpenACC event type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_EVENT_KIND', 'ENUM_OPENMP_EVENT_KIND', 350, 'CREATE TABLE ENUM_OPENMP_EVENT_KIND (\\n -- OpenMP event kind labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_THREAD', 'ENUM_OPENMP_THREAD', 351, 'CREATE TABLE ENUM_OPENMP_THREAD (\\n -- OpenMP thread labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_DISPATCH', 'ENUM_OPENMP_DISPATCH', 352, 'CREATE TABLE ENUM_OPENMP_DISPATCH (\\n -- OpenMP dispatch labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_SYNC_REGION', 'ENUM_OPENMP_SYNC_REGION', 353, 'CREATE TABLE ENUM_OPENMP_SYNC_REGION (\\n -- OpenMP sync region labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_WORK', 'ENUM_OPENMP_WORK', 354, 'CREATE TABLE ENUM_OPENMP_WORK (\\n -- OpenMP work labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_MUTEX', 'ENUM_OPENMP_MUTEX', 355, 'CREATE TABLE ENUM_OPENMP_MUTEX (\\n -- OpenMP mutex labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_TASK_FLAG', 'ENUM_OPENMP_TASK_FLAG', 356, 'CREATE TABLE ENUM_OPENMP_TASK_FLAG (\\n -- OpenMP task flags labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_OPENMP_TASK_STATUS', 'ENUM_OPENMP_TASK_STATUS', 358, 'CREATE TABLE ENUM_OPENMP_TASK_STATUS (\\n -- OpenMP task status labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_SLI_TRANSER', 'ENUM_SLI_TRANSER', 359, 'CREATE TABLE ENUM_SLI_TRANSER (\\n -- OpenMP task status labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_DXGI_FORMAT', 'ENUM_DXGI_FORMAT', 360, 'CREATE TABLE ENUM_DXGI_FORMAT (\\n -- DXGI image format labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NVDRIVER_EVENT_ID', 'ENUM_NVDRIVER_EVENT_ID', 363, 'CREATE TABLE ENUM_NVDRIVER_EVENT_ID (\\n -- NV-Driver event it labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_WDDM_PAGING_QUEUE_TYPE', 'ENUM_WDDM_PAGING_QUEUE_TYPE', 364, 'CREATE TABLE ENUM_WDDM_PAGING_QUEUE_TYPE (\\n -- WDDM paging queue type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_WDDM_PACKET_TYPE', 'ENUM_WDDM_PACKET_TYPE', 365, 'CREATE TABLE ENUM_WDDM_PACKET_TYPE (\\n -- WDDM packet type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_WDDM_ENGINE_TYPE', 'ENUM_WDDM_ENGINE_TYPE', 366, 'CREATE TABLE ENUM_WDDM_ENGINE_TYPE (\\n -- WDDM engine type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_WDDM_INTERRUPT_TYPE', 'ENUM_WDDM_INTERRUPT_TYPE', 367, 'CREATE TABLE ENUM_WDDM_INTERRUPT_TYPE (\\n -- WDDM DMA interrupt type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_WDDM_VIDMM_OP_TYPE', 'ENUM_WDDM_VIDMM_OP_TYPE', 369, 'CREATE TABLE ENUM_WDDM_VIDMM_OP_TYPE (\\n -- WDDM VidMm operation type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NET_LINK_TYPE', 'ENUM_NET_LINK_TYPE', 370, 'CREATE TABLE ENUM_NET_LINK_TYPE (\\n -- NIC link layer labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NET_DEVICE_ID', 'ENUM_NET_DEVICE_ID', 371, 'CREATE TABLE ENUM_NET_DEVICE_ID (\\n -- NIC PCIe device id labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NET_VENDOR_ID', 'ENUM_NET_VENDOR_ID', 372, 'CREATE TABLE ENUM_NET_VENDOR_ID (\\n -- NIC PCIe vendor id labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_ETW_MEMORY_TRANSFER_TYPE', 'ENUM_ETW_MEMORY_TRANSFER_TYPE', 373, 'CREATE TABLE ENUM_ETW_MEMORY_TRANSFER_TYPE (\\n -- memory transfer type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_PMU_EVENT_SOURCE', 'ENUM_PMU_EVENT_SOURCE', 374, 'CREATE TABLE ENUM_PMU_EVENT_SOURCE (\\n -- PMU event source labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_PMU_UNIT_TYPE', 'ENUM_PMU_UNIT_TYPE', 375, 'CREATE TABLE ENUM_PMU_UNIT_TYPE (\\n -- PMU unit type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_VIDEO_ENGINE_TYPE', 'ENUM_VIDEO_ENGINE_TYPE', 376, 'CREATE TABLE ENUM_VIDEO_ENGINE_TYPE (\\n -- Video engine type id labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_VIDEO_ENGINE_CODEC', 'ENUM_VIDEO_ENGINE_CODEC', 377, 'CREATE TABLE ENUM_VIDEO_ENGINE_CODEC (\\n -- Video engine codec labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_DIAGNOSTIC_SEVERITY_LEVEL', 'ENUM_DIAGNOSTIC_SEVERITY_LEVEL', 379, 'CREATE TABLE ENUM_DIAGNOSTIC_SEVERITY_LEVEL (\\n -- Diagnostic message severity level labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_DIAGNOSTIC_SOURCE_TYPE', 'ENUM_DIAGNOSTIC_SOURCE_TYPE', 380, 'CREATE TABLE ENUM_DIAGNOSTIC_SOURCE_TYPE (\\n -- Diagnostic message source type labels\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_DIAGNOSTIC_TIMESTAMP_SOURCE', 'ENUM_DIAGNOSTIC_TIMESTAMP_SOURCE', 381, 'CREATE TABLE ENUM_DIAGNOSTIC_TIMESTAMP_SOURCE (\\n -- Diagnostic message timestamp source lables\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'ENUM_NET_IB_DEVICE_TYPE', 'ENUM_NET_IB_DEVICE_TYPE', 382, 'CREATE TABLE ENUM_NET_IB_DEVICE_TYPE (\\n -- network device types\\n\\n id INTEGER NOT NULL PRIMARY KEY, -- Enum numerical value.\\n name TEXT, -- Enum symbol name.\\n label TEXT -- Enum human name.\\n)'), ('table', 'META_DATA_CAPTURE', 'META_DATA_CAPTURE', 383, 'CREATE TABLE META_DATA_CAPTURE (\\n -- information about nsys capture parameters\\n\\n name TEXT NOT NULL, -- Name of meta-data record\\n value TEXT -- Value of meta-data record\\n)'), ('table', 'META_DATA_EXPORT', 'META_DATA_EXPORT', 388, 'CREATE TABLE META_DATA_EXPORT (\\n -- information about nsys export process\\n\\n name TEXT NOT NULL, -- Name of meta-data record\\n value TEXT -- Value of meta-data record\\n)')]"